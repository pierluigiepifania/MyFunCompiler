
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import Node.*;
import Node.StatementOp.*;
import Node.ExpressionOp.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyFunparser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public MyFunparser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyFunparser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyFunparser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\005\000\002\002\004\000\002\004" +
    "\002\000\002\004\004\000\002\003\010\000\002\005\002" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\016\000\002" +
    "\013\014\000\002\014\002\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\017\002\000\002\017\004\000\002\020\003\000" +
    "\002\020\005\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\005\000\002\033\025" +
    "\000\002\022\012\000\002\027\002\000\002\027\005\000" +
    "\002\023\011\000\002\024\005\000\002\024\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\026\005\000\002\030\006\000\002\030\005" +
    "\000\002\031\003\000\002\031\005\000\002\031\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\004" +
    "\000\002\032\005\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\020\004\uffff\007\010\013\uffff\015\007\016" +
    "\005\017\013\020\004\001\002\000\042\005\ufff8\007\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\024\ufff8\026" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\064\ufff8" +
    "\067\ufff8\001\002\000\042\005\ufff7\007\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\024\ufff7\026\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\064\ufff7\067\ufff7\001" +
    "\002\000\004\002\310\001\002\000\042\005\ufff5\007\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\024\ufff5\026" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\064\ufff5" +
    "\067\ufff5\001\002\000\004\064\272\001\002\000\006\004" +
    "\ufffc\013\117\001\002\000\004\064\016\001\002\000\042" +
    "\005\ufff6\007\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\024\ufff6\026\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\064\ufff6\067\ufff6\001\002\000\050\004\uffff\005" +
    "\uffff\007\010\013\uffff\015\007\016\005\017\013\020\004" +
    "\021\uffff\023\uffff\024\uffff\026\uffff\056\uffff\057\uffff\060" +
    "\uffff\061\uffff\062\uffff\064\uffff\067\uffff\001\002\000\036" +
    "\004\ufffe\005\ufffe\013\ufffe\021\ufffe\023\ufffe\024\ufffe\026" +
    "\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\064\ufffe" +
    "\067\ufffe\001\002\000\010\010\ufff4\011\ufff4\012\113\001" +
    "\002\000\006\010\021\011\020\001\002\000\004\064\022" +
    "\001\002\000\050\004\ufffa\005\ufffa\007\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\023\ufffa\024\ufffa" +
    "\026\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\064" +
    "\ufffa\067\ufffa\001\002\000\010\010\ufff3\011\ufff3\012\023" +
    "\001\002\000\026\014\025\025\036\030\026\031\032\035" +
    "\030\041\024\055\031\063\027\064\034\065\037\001\002" +
    "\000\026\014\025\025\036\030\026\031\032\035\030\041" +
    "\024\055\031\063\027\064\034\065\037\001\002\000\054" +
    "\010\uffc2\011\uffc2\022\uffc2\027\uffc2\032\uffc2\034\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\001\002\000\054\010\uffc4\011\uffc4\022\uffc4" +
    "\027\uffc4\032\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\001\002\000" +
    "\054\010\uffc0\011\uffc0\022\uffc0\027\uffc0\032\uffc0\034\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\001\002\000\026\014\025\025\036\030" +
    "\026\031\032\035\030\041\024\055\031\063\027\064\034" +
    "\065\037\001\002\000\054\010\uffac\011\uffac\022\uffac\027" +
    "\uffac\032\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\001\002\000\054" +
    "\010\uffc3\011\uffc3\022\uffc3\027\uffc3\032\uffc3\034\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\001\002\000\054\010\uffab\011\uffab\022\uffab" +
    "\027\uffab\032\uffab\034\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\001\002\000" +
    "\056\010\uffbf\011\uffbf\022\uffbf\027\uffbf\032\uffbf\034\uffbf" +
    "\035\077\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\001\002\000\044\010\ufff1\011" +
    "\ufff1\032\053\034\054\040\045\041\042\042\052\043\050" +
    "\044\051\045\044\046\055\047\047\050\046\051\041\052" +
    "\056\053\043\054\057\001\002\000\026\014\025\025\036" +
    "\030\026\031\032\035\030\041\024\055\031\063\027\064" +
    "\034\065\037\001\002\000\054\010\uffc1\011\uffc1\022\uffc1" +
    "\027\uffc1\032\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002\000" +
    "\054\010\uffae\011\uffae\022\uffae\027\uffae\032\uffae\034\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\041\052\056" +
    "\053\uffae\054\uffae\001\002\000\026\014\025\025\036\030" +
    "\026\031\032\035\030\041\024\055\031\063\027\064\034" +
    "\065\037\001\002\000\026\014\025\025\036\030\026\031" +
    "\032\035\030\041\024\055\031\063\027\064\034\065\037" +
    "\001\002\000\026\014\025\025\036\030\026\031\032\035" +
    "\030\041\024\055\031\063\027\064\034\065\037\001\002" +
    "\000\026\014\025\025\036\030\026\031\032\035\030\041" +
    "\024\055\031\063\027\064\034\065\037\001\002\000\026" +
    "\014\025\025\036\030\026\031\032\035\030\041\024\055" +
    "\031\063\027\064\034\065\037\001\002\000\026\014\025" +
    "\025\036\030\026\031\032\035\030\041\024\055\031\063" +
    "\027\064\034\065\037\001\002\000\026\014\025\025\036" +
    "\030\026\031\032\035\030\041\024\055\031\063\027\064" +
    "\034\065\037\001\002\000\026\014\025\025\036\030\026" +
    "\031\032\035\030\041\024\055\031\063\027\064\034\065" +
    "\037\001\002\000\026\014\025\025\036\030\026\031\032" +
    "\035\030\041\024\055\031\063\027\064\034\065\037\001" +
    "\002\000\026\014\025\025\036\030\026\031\032\035\030" +
    "\041\024\055\031\063\027\064\034\065\037\001\002\000" +
    "\026\014\025\025\036\030\026\031\032\035\030\041\024" +
    "\055\031\063\027\064\034\065\037\001\002\000\026\014" +
    "\025\025\036\030\026\031\032\035\030\041\024\055\031" +
    "\063\027\064\034\065\037\001\002\000\026\014\025\025" +
    "\036\030\026\031\032\035\030\041\024\055\031\063\027" +
    "\064\034\065\037\001\002\000\026\014\025\025\036\030" +
    "\026\031\032\035\030\041\024\055\031\063\027\064\034" +
    "\065\037\001\002\000\026\014\025\025\036\030\026\031" +
    "\032\035\030\041\024\055\031\063\027\064\034\065\037" +
    "\001\002\000\054\010\uffba\011\uffba\022\uffba\027\uffba\032" +
    "\053\034\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\051\045\044\046\055\047\047\050\046\051" +
    "\041\052\056\053\uffba\054\uffba\001\002\000\054\010\uffb6" +
    "\011\uffb6\022\uffb6\027\uffb6\032\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\001\002\000\040\010\uffb3\011\uffb3\022\uffb3\027\uffb3" +
    "\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\051\041\052\056\053\uffb3\054\uffb3\001\002\000\054" +
    "\010\uffb7\011\uffb7\022\uffb7\027\uffb7\032\053\034\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\051" +
    "\045\044\046\055\047\047\050\046\051\041\052\056\053" +
    "\uffb7\054\uffb7\001\002\000\040\010\uffb0\011\uffb0\022\uffb0" +
    "\027\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\051\041\052\056\053\uffb0\054\uffb0\001\002" +
    "\000\054\010\uffbc\011\uffbc\022\uffbc\027\uffbc\032\053\034" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\051\045\044\046\055\047\047\050\046\051\041\052" +
    "\056\053\uffbc\054\uffbc\001\002\000\040\010\uffb5\011\uffb5" +
    "\022\uffb5\027\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\051\041\052\056\053\uffb5\054\uffb5" +
    "\001\002\000\054\010\uffbb\011\uffbb\022\uffbb\027\uffbb\032" +
    "\053\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\051\045\044\046\055\047\047\050\046\051" +
    "\041\052\056\053\uffbb\054\uffbb\001\002\000\040\010\uffb2" +
    "\011\uffb2\022\uffb2\027\uffb2\034\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\051\041\052\056\053\uffb2" +
    "\054\uffb2\001\002\000\040\010\uffb1\011\uffb1\022\uffb1\027" +
    "\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\051\041\052\056\053\uffb1\054\uffb1\001\002\000" +
    "\054\010\uffbe\011\uffbe\022\uffbe\027\uffbe\032\053\034\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\051\045\044\046\055\047\047\050\046\051\041\052\056" +
    "\053\uffbe\054\uffbe\001\002\000\040\010\uffb4\011\uffb4\022" +
    "\uffb4\027\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\051\041\052\056\053\uffb4\054\uffb4\001" +
    "\002\000\054\010\uffb8\011\uffb8\022\uffb8\027\uffb8\032\053" +
    "\034\054\036\uffb8\037\uffb8\040\045\041\042\042\052\043" +
    "\050\044\051\045\044\046\055\047\047\050\046\051\041" +
    "\052\056\053\043\054\057\001\002\000\054\010\uffbd\011" +
    "\uffbd\022\uffbd\027\uffbd\032\053\034\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\051\045\044\046" +
    "\055\047\047\050\046\051\041\052\056\053\uffbd\054\uffbd" +
    "\001\002\000\054\010\uffb9\011\uffb9\022\uffb9\027\uffb9\032" +
    "\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\001\002\000\032\014\025" +
    "\025\036\030\026\031\032\033\101\035\030\036\102\041" +
    "\024\055\031\063\027\064\034\065\037\001\002\000\004" +
    "\036\107\001\002\000\004\064\106\001\002\000\054\010" +
    "\uffc8\011\uffc8\022\uffc8\027\uffc8\032\uffc8\034\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\001\002\000\044\011\104\032\053\034\054\036" +
    "\uffc7\040\045\041\042\042\052\043\050\044\051\045\044" +
    "\046\055\047\047\050\046\051\041\052\056\053\043\054" +
    "\057\001\002\000\030\014\025\025\036\030\026\031\032" +
    "\033\101\035\030\041\024\055\031\063\027\064\034\065" +
    "\037\001\002\000\004\036\uffc6\001\002\000\004\036\uffc5" +
    "\001\002\000\054\010\uffc9\011\uffc9\022\uffc9\027\uffc9\032" +
    "\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\001\002\000\042\032\053" +
    "\034\054\036\111\040\045\041\042\042\052\043\050\044" +
    "\051\045\044\046\055\047\047\050\046\051\041\052\056" +
    "\053\043\054\057\001\002\000\054\010\uffad\011\uffad\022" +
    "\uffad\027\uffad\032\uffad\034\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\001\002" +
    "\000\054\010\uffaf\011\uffaf\022\uffaf\027\uffaf\032\053\034" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\051\045\044\046\055\047\047\050\046\051\041\052" +
    "\056\053\uffaf\054\uffaf\001\002\000\026\014\025\025\036" +
    "\030\026\031\032\035\030\041\024\055\031\063\027\064" +
    "\034\065\037\001\002\000\044\010\ufff2\011\ufff2\032\053" +
    "\034\054\040\045\041\042\042\052\043\050\044\051\045" +
    "\044\046\055\047\047\050\046\051\041\052\056\053\043" +
    "\054\057\001\002\000\006\004\ufffc\013\117\001\002\000" +
    "\004\004\263\001\002\000\004\064\120\001\002\000\004" +
    "\035\121\001\002\000\016\006\126\015\007\016\005\017" +
    "\013\020\004\036\uffe7\001\002\000\006\011\260\036\uffe6" +
    "\001\002\000\006\011\uffe5\036\uffe5\001\002\000\004\064" +
    "\257\001\002\000\004\036\131\001\002\000\012\015\007" +
    "\016\005\017\013\020\004\001\002\000\004\064\130\001" +
    "\002\000\006\011\uffe2\036\uffe2\001\002\000\044\005\uffff" +
    "\007\010\015\007\016\005\017\013\020\004\021\uffff\024" +
    "\uffff\026\uffff\037\132\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\064\uffff\067\uffff\001\002\000\012\015\007\016" +
    "\005\017\013\020\004\001\002\000\030\005\141\021\145" +
    "\024\136\026\uffe1\056\134\057\146\060\140\061\151\062" +
    "\135\064\147\067\144\001\002\000\004\064\244\001\002" +
    "\000\026\014\025\025\036\030\026\031\032\035\030\041" +
    "\024\055\031\063\027\064\034\065\037\001\002\000\026" +
    "\014\025\025\036\030\026\031\032\035\030\041\024\055" +
    "\031\063\027\064\034\065\037\001\002\000\004\026\232" +
    "\001\002\000\026\014\025\025\036\030\026\031\032\035" +
    "\030\041\024\055\031\063\027\064\034\065\037\001\002" +
    "\000\026\014\025\025\036\030\026\031\032\035\030\041" +
    "\024\055\031\063\027\064\034\065\037\001\002\000\004" +
    "\010\226\001\002\000\004\010\225\001\002\000\004\064" +
    "\203\001\002\000\026\014\025\025\036\030\026\031\032" +
    "\035\030\041\024\055\031\063\027\064\034\065\037\001" +
    "\002\000\026\014\025\025\036\030\026\031\032\035\030" +
    "\041\024\055\031\063\027\064\034\065\037\001\002\000" +
    "\006\012\166\035\077\001\002\000\004\010\165\001\002" +
    "\000\026\014\025\025\036\030\026\031\032\035\030\041" +
    "\024\055\031\063\027\064\034\065\037\001\002\000\004" +
    "\010\163\001\002\000\004\010\162\001\002\000\004\010" +
    "\161\001\002\000\004\010\160\001\002\000\034\005\141" +
    "\021\145\023\uffe1\024\136\026\uffe1\056\134\057\146\060" +
    "\140\061\151\062\135\064\147\066\uffe1\067\144\001\002" +
    "\000\010\023\uffe0\026\uffe0\066\uffe0\001\002\000\034\005" +
    "\uffd7\021\uffd7\023\uffd7\024\uffd7\026\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\064\uffd7\066\uffd7\067\uffd7\001" +
    "\002\000\034\005\uffdb\021\uffdb\023\uffdb\024\uffdb\026\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb\066" +
    "\uffdb\067\uffdb\001\002\000\034\005\uffdd\021\uffdd\023\uffdd" +
    "\024\uffdd\026\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\064\uffdd\066\uffdd\067\uffdd\001\002\000\034\005\uffd8" +
    "\021\uffd8\023\uffd8\024\uffd8\026\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\064\uffd8\066\uffd8\067\uffd8\001\002" +
    "\000\042\010\uffcb\032\053\034\054\040\045\041\042\042" +
    "\052\043\050\044\051\045\044\046\055\047\047\050\046" +
    "\051\041\052\056\053\043\054\057\001\002\000\034\005" +
    "\uffd9\021\uffd9\023\uffd9\024\uffd9\026\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\064\uffd9\066\uffd9\067\uffd9\001" +
    "\002\000\026\014\025\025\036\030\026\031\032\035\030" +
    "\041\024\055\031\063\027\064\034\065\037\001\002\000" +
    "\042\010\uffca\032\053\034\054\040\045\041\042\042\052" +
    "\043\050\044\051\045\044\046\055\047\047\050\046\051" +
    "\041\052\056\053\043\054\057\001\002\000\042\010\uffce" +
    "\032\053\034\054\040\045\041\042\042\052\043\050\044" +
    "\051\045\044\046\055\047\047\050\046\051\041\052\056" +
    "\053\043\054\057\001\002\000\042\022\172\032\053\034" +
    "\054\040\045\041\042\042\052\043\050\044\051\045\044" +
    "\046\055\047\047\050\046\051\041\052\056\053\043\054" +
    "\057\001\002\000\044\005\uffff\007\010\015\007\016\005" +
    "\017\013\020\004\021\uffff\023\uffff\024\uffff\026\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\067\uffff" +
    "\001\002\000\032\005\141\021\145\023\uffe1\024\136\026" +
    "\uffe1\056\134\057\146\060\140\061\151\062\135\064\147" +
    "\067\144\001\002\000\006\023\175\026\uffd3\001\002\000" +
    "\042\005\uffff\007\010\015\007\016\005\017\013\020\004" +
    "\021\uffff\024\uffff\026\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\064\uffff\067\uffff\001\002\000\004\026\177" +
    "\001\002\000\004\021\200\001\002\000\004\010\uffd4\001" +
    "\002\000\030\005\141\021\145\024\136\026\uffe1\056\134" +
    "\057\146\060\140\061\151\062\135\064\147\067\144\001" +
    "\002\000\004\026\uffd2\001\002\000\026\014\025\025\036" +
    "\030\026\031\032\035\030\041\024\055\031\063\027\064" +
    "\034\065\037\001\002\000\042\032\053\034\054\037\205" +
    "\040\045\041\042\042\052\043\050\044\051\045\044\046" +
    "\055\047\047\050\046\051\041\052\056\053\043\054\057" +
    "\001\002\000\030\005\141\021\145\024\136\056\134\057" +
    "\146\060\140\061\151\062\135\064\147\066\uffe1\067\144" +
    "\001\002\000\004\066\207\001\002\000\004\010\210\001" +
    "\002\000\026\014\025\025\036\030\026\031\032\035\030" +
    "\041\024\055\031\063\027\064\034\065\037\001\002\000" +
    "\042\032\053\034\054\037\212\040\045\041\042\042\052" +
    "\043\050\044\051\045\044\046\055\047\047\050\046\051" +
    "\041\052\056\053\043\054\057\001\002\000\030\005\141" +
    "\021\145\024\136\056\134\057\146\060\140\061\151\062" +
    "\135\064\147\066\uffe1\067\144\001\002\000\004\066\214" +
    "\001\002\000\004\010\215\001\002\000\026\014\025\025" +
    "\036\030\026\031\032\035\030\041\024\055\031\063\027" +
    "\064\034\065\037\001\002\000\042\032\053\034\054\037" +
    "\217\040\045\041\042\042\052\043\050\044\051\045\044" +
    "\046\055\047\047\050\046\051\041\052\056\053\043\054" +
    "\057\001\002\000\030\005\141\021\145\024\136\056\134" +
    "\057\146\060\140\061\151\062\135\064\147\066\uffe1\067" +
    "\144\001\002\000\004\066\221\001\002\000\004\010\222" +
    "\001\002\000\004\026\223\001\002\000\004\067\224\001" +
    "\002\000\004\010\uffd5\001\002\000\034\005\uffda\021\uffda" +
    "\023\uffda\024\uffda\026\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\062\uffda\064\uffda\066\uffda\067\uffda\001\002\000\034" +
    "\005\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\064\uffdc\066\uffdc\067\uffdc" +
    "\001\002\000\042\010\230\032\053\034\054\040\045\041" +
    "\042\042\052\043\050\044\051\045\044\046\055\047\047" +
    "\050\046\051\041\052\056\053\043\054\057\001\002\000" +
    "\034\005\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\062\uffd6\064\uffd6\066\uffd6\067" +
    "\uffd6\001\002\000\042\010\uffcd\032\053\034\054\040\045" +
    "\041\042\042\052\043\050\044\051\045\044\046\055\047" +
    "\047\050\046\051\041\052\056\053\043\054\057\001\002" +
    "\000\004\013\233\001\002\000\004\010\234\001\002\000" +
    "\006\004\uffe8\013\uffe8\001\002\000\042\027\236\032\053" +
    "\034\054\040\045\041\042\042\052\043\050\044\051\045" +
    "\044\046\055\047\047\050\046\051\041\052\056\053\043" +
    "\054\057\001\002\000\042\005\uffff\007\010\015\007\016" +
    "\005\017\013\020\004\021\uffff\024\uffff\026\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\067\uffff\001" +
    "\002\000\030\005\141\021\145\024\136\026\uffe1\056\134" +
    "\057\146\060\140\061\151\062\135\064\147\067\144\001" +
    "\002\000\004\026\241\001\002\000\004\027\242\001\002" +
    "\000\004\010\uffd1\001\002\000\042\010\uffcc\032\053\034" +
    "\054\040\045\041\042\042\052\043\050\044\051\045\044" +
    "\046\055\047\047\050\046\051\041\052\056\053\043\054" +
    "\057\001\002\000\032\010\uffdf\011\uffdf\014\uffdf\025\uffdf" +
    "\030\uffdf\031\uffdf\035\uffdf\041\uffdf\055\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\001\002\000\032\010\uffcf\011\246\014\025" +
    "\025\036\030\026\031\032\035\030\041\024\055\031\063" +
    "\027\064\034\065\037\001\002\000\004\064\250\001\002" +
    "\000\042\010\uffd0\032\053\034\054\040\045\041\042\042" +
    "\052\043\050\044\051\045\044\046\055\047\047\050\046" +
    "\051\041\052\056\053\043\054\057\001\002\000\032\010" +
    "\uffde\011\uffde\014\uffde\025\uffde\030\uffde\031\uffde\035\uffde" +
    "\041\uffde\055\uffde\063\uffde\064\uffde\065\uffde\001\002\000" +
    "\042\005\uffff\007\010\015\007\016\005\017\013\020\004" +
    "\021\uffff\024\uffff\026\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\064\uffff\067\uffff\001\002\000\030\005\141" +
    "\021\145\024\136\026\uffe1\056\134\057\146\060\140\061" +
    "\151\062\135\064\147\067\144\001\002\000\004\026\254" +
    "\001\002\000\004\013\255\001\002\000\004\010\256\001" +
    "\002\000\006\004\uffe9\013\uffe9\001\002\000\006\011\uffe3" +
    "\036\uffe3\001\002\000\014\006\126\015\007\016\005\017" +
    "\013\020\004\001\002\000\006\011\uffe4\036\uffe4\001\002" +
    "\000\004\002\001\001\002\000\042\005\uffff\007\010\015" +
    "\007\016\005\017\013\020\004\021\uffff\024\uffff\026\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\067" +
    "\uffff\001\002\000\030\005\141\021\145\024\136\026\uffe1" +
    "\056\134\057\146\060\140\061\151\062\135\064\147\067" +
    "\144\001\002\000\004\026\266\001\002\000\004\004\267" +
    "\001\002\000\004\010\270\001\002\000\004\002\ufffd\001" +
    "\002\000\004\004\ufffb\001\002\000\004\012\306\001\002" +
    "\000\006\010\275\011\274\001\002\000\004\064\276\001" +
    "\002\000\050\004\ufff9\005\ufff9\007\ufff9\013\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\023\ufff9\024\ufff9\026" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\064\ufff9" +
    "\067\ufff9\001\002\000\004\012\277\001\002\000\014\014" +
    "\304\030\302\031\305\063\301\065\303\001\002\000\006" +
    "\010\uffef\011\uffef\001\002\000\006\010\uffea\011\uffea\001" +
    "\002\000\006\010\uffee\011\uffee\001\002\000\006\010\uffeb" +
    "\011\uffeb\001\002\000\006\010\uffec\011\uffec\001\002\000" +
    "\006\010\uffed\011\uffed\001\002\000\014\014\304\030\302" +
    "\031\305\063\301\065\303\001\002\000\006\010\ufff0\011" +
    "\ufff0\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\012\002\005\004\010\006\013\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\272\001\001\000\006\005" +
    "\115\013\114\001\001\000\004\010\016\001\001\000\002" +
    "\001\001\000\010\004\014\006\013\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\032\032\034\001\001\000\006\030\032\032\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\032\032\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\032\032\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\032\032\075\001\001\000" +
    "\006\030\032\032\074\001\001\000\006\030\032\032\073" +
    "\001\001\000\006\030\032\032\072\001\001\000\006\030" +
    "\032\032\071\001\001\000\006\030\032\032\070\001\001" +
    "\000\006\030\032\032\067\001\001\000\006\030\032\032" +
    "\066\001\001\000\006\030\032\032\065\001\001\000\006" +
    "\030\032\032\064\001\001\000\006\030\032\032\063\001" +
    "\001\000\006\030\032\032\062\001\001\000\006\030\032" +
    "\032\061\001\001\000\006\030\032\032\060\001\001\000" +
    "\006\030\032\032\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\032\031\077\032\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\032\031\104\032\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\032\032\113\001\001\000\002\001\001\000\006\005\270" +
    "\013\114\001\001\000\004\003\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\123\014\124\015\121" +
    "\016\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\132\006" +
    "\013\007\011\001\001\000\004\007\250\001\001\000\024" +
    "\017\136\021\155\022\152\023\141\024\153\025\142\026" +
    "\147\030\151\033\154\001\001\000\004\020\244\001\001" +
    "\000\006\030\032\032\242\001\001\000\006\030\032\032" +
    "\234\001\001\000\002\001\001\000\006\030\032\032\230" +
    "\001\001\000\006\030\032\032\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\032" +
    "\032\170\001\001\000\006\030\032\032\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\032\032\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\156\021\155\022\152" +
    "\023\141\024\153\025\142\026\147\030\151\033\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\032\032\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\172\006\013\007\011\001\001\000\024\017\173\021\155" +
    "\022\152\023\141\024\153\025\142\026\147\030\151\033" +
    "\154\001\001\000\004\027\175\001\001\000\010\004\200" +
    "\006\013\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\201\021\155\022\152" +
    "\023\141\024\153\025\142\026\147\030\151\033\154\001" +
    "\001\000\002\001\001\000\006\030\032\032\203\001\001" +
    "\000\002\001\001\000\024\017\205\021\155\022\152\023" +
    "\141\024\153\025\142\026\147\030\151\033\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\032\032" +
    "\210\001\001\000\002\001\001\000\024\017\212\021\155" +
    "\022\152\023\141\024\153\025\142\026\147\030\151\033" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\032\032\215\001\001\000\002\001\001\000\024\017" +
    "\217\021\155\022\152\023\141\024\153\025\142\026\147" +
    "\030\151\033\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\236\006\013\007\011\001\001\000\024\017\237\021\155" +
    "\022\152\023\141\024\153\025\142\026\147\030\151\033" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\032\032\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\251\006\013\007\011\001" +
    "\001\000\024\017\252\021\155\022\152\023\141\024\153" +
    "\025\142\026\147\030\151\033\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\123\016\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\263\006\013" +
    "\007\011\001\001\000\024\017\264\021\155\022\152\023" +
    "\141\024\153\025\142\026\147\030\151\033\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\306\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyFunparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyFunparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyFunparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	Lexer lexer;
	public MyFunparser(Lexer lexer){
	    super(lexer);
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyFunparser$actions {
  private final MyFunparser parser;

  /** Constructor */
  CUP$MyFunparser$actions(MyFunparser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyFunparser$do_action_part00000000(
    int                        CUP$MyFunparser$act_num,
    java_cup.runtime.lr_parser CUP$MyFunparser$parser,
    java.util.Stack            CUP$MyFunparser$stack,
    int                        CUP$MyFunparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyFunparser$result;

      /* select the action based on the action number */
      switch (CUP$MyFunparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= vardecllist funlist main 
            {
              ProgramOp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		List<FunOp> f1 = (List<FunOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		MainOp m = (MainOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new ProgramOp("ProgramNode",v1,f1, m); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		RESULT = start_val;
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyFunparser$parser.done_parsing();
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // vardecllist ::= 
            {
              List<VarDeclOp> RESULT =null;
		 RESULT = new LinkedList<VarDeclOp>(); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("vardecllist",2, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vardecllist ::= vardecl vardecllist 
            {
              List<VarDeclOp> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		VarDeclOp vd = (VarDeclOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 v1.add(vd); RESULT = v1; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("vardecllist",2, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= MAIN vardecllist statlist END MAIN SEMI 
            {
              MainOp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).right;
		List<StatementOp> s1 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).value;
		RESULT = new MainOp("MainNode", new BodyOp("BodyNode", v1,s1)); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-5)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funlist ::= 
            {
              List<FunOp> RESULT =null;
		  RESULT = new LinkedList<FunOp>();;  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("funlist",3, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funlist ::= fun funlist 
            {
              List<FunOp> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		FunOp fn = (FunOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		List<FunOp> f1 = (List<FunOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 f1.add(fn); RESULT = f1; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("funlist",3, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vardecl ::= type idlistinit SEMI 
            {
              VarDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		List<IdInitOp> il = (List<IdInitOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = new VarDeclOp("VarDeclOp", t, il); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("vardecl",4, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vardecl ::= VAR idlistinitobbl SEMI 
            {
              VarDeclOp RESULT =null;
		int iloleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int iloright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		List<IdInitOp> ilo = (List<IdInitOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = new VarDeclOp("VarDeclOp", ilo);  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("vardecl",4, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= INTEGER 
            {
              Integer RESULT =null;
		 RESULT = Token.INTEGER; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOL 
            {
              Integer RESULT =null;
		 RESULT = Token.BOOL; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= REAL 
            {
              Integer RESULT =null;
		 RESULT = Token.REAL; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= STRING 
            {
              Integer RESULT =null;
		 RESULT = Token.STRING; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // idlistinit ::= ID 
            {
              List<IdInitOp> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 List<IdInitOp> idl = new LinkedList<IdInitOp>(); idl.add(new IdInitOp ("IdListNode", new Identifier ("ID", i))); RESULT = idl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlistinit",6, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // idlistinit ::= idlistinit COMMA ID 
            {
              List<IdInitOp> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		List<IdInitOp> il = (List<IdInitOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 il.add(new IdInitOp ("IdListNode", new Identifier ("ID", i))); RESULT = il; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlistinit",6, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // idlistinit ::= ID ASSIGN expr 
            {
              List<IdInitOp> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 List<IdInitOp> idl = new LinkedList<IdInitOp>(); idl.add(new IdInitOp ("IdListNode", new Identifier ("ID", i), e)); RESULT = idl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlistinit",6, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // idlistinit ::= idlistinit COMMA ID ASSIGN expr 
            {
              List<IdInitOp> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).right;
		List<IdInitOp> il = (List<IdInitOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 il.add(new IdInitOp ("IdListNode", new Identifier ("ID", i), e)); RESULT = il;  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlistinit",6, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // idlistinitobbl ::= ID ASSIGN const 
            {
              List<IdInitOp> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 List<IdInitOp> idl = new LinkedList<IdInitOp>(); idl.add(new IdInitOp ("IdListNode", new Identifier ("ID", i), e)); RESULT = idl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlistinitobbl",7, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // idlistinitobbl ::= idlistinitobbl COMMA ID ASSIGN const 
            {
              List<IdInitOp> RESULT =null;
		int iloleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).left;
		int iloright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).right;
		List<IdInitOp> ilo = (List<IdInitOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 ilo.add(new IdInitOp ("IdListNode", new Identifier ("ID", i), e)); RESULT = ilo;  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlistinitobbl",7, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // const ::= TRUE 
            {
              ExpressionOp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new BooleanEx("BoolConst", true); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("const",8, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // const ::= FALSE 
            {
              ExpressionOp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new BooleanEx("BoolConst", false); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("const",8, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // const ::= NUMBER_INT 
            {
              ExpressionOp RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Integer ni = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value);
		 RESULT = new IntegerEx("NumberInt", ni); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("const",8, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // const ::= NUMBER_REAL 
            {
              ExpressionOp RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Float nr = Float.parseFloat((String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value);
		 RESULT = new RealEx("NumberReal", nr); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("const",8, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // const ::= STRING_CONST 
            {
              ExpressionOp RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new StringEx("StringConst", sc);  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("const",8, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fun ::= FUN ID LPAR paramdecllist RPAR COLON type vardecllist statlist END FUN SEMI 
            {
              FunOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-10)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-8)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-8)).right;
		List<ParDeclOp> pdl = (List<ParDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-5)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).right;
		List<StatementOp> s1 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).value;
		 FunOp f = new FunOp("FunOpNode", new Identifier ("ID", i), pdl, t, new BodyOp("BodyNode", v1,s1));  RESULT = f; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("fun",9, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-11)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fun ::= FUN ID LPAR paramdecllist RPAR vardecllist statlist END FUN SEMI 
            {
              FunOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-8)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).right;
		List<ParDeclOp> pdl = (List<ParDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).right;
		List<StatementOp> s1 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).value;
		 FunOp f = new FunOp("FunOpNode", new Identifier ("ID", i), pdl, new BodyOp("BodyNode", v1,s1));  RESULT = f; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("fun",9, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-9)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramdecllist ::= 
            {
              List<ParDeclOp> RESULT =null;
		 RESULT = new LinkedList<ParDeclOp>();;  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("paramdecllist",10, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramdecllist ::= nonemptyparamdecllist 
            {
              List<ParDeclOp> RESULT =null;
		int npdlleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int npdlright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		List<ParDeclOp> npdl = (List<ParDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = npdl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("paramdecllist",10, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nonemptyparamdecllist ::= pardecl 
            {
              List<ParDeclOp> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ParDeclOp pd = (ParDeclOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 List<ParDeclOp> pl = new LinkedList<ParDeclOp>(); pl.add(pd); RESULT = pl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("nonemptyparamdecllist",11, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nonemptyparamdecllist ::= nonemptyparamdecllist COMMA pardecl 
            {
              List<ParDeclOp> RESULT =null;
		int npdlleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int npdlright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		List<ParDeclOp> npdl = (List<ParDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ParDeclOp pd = (ParDeclOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 npdl.add(pd); RESULT = npdl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("nonemptyparamdecllist",11, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pardecl ::= type ID 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new ParDeclOp ("ID", 0, t, new Identifier("ID", i)); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("pardecl",12, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pardecl ::= OUT type ID 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new ParDeclOp ("ID", 1, t, new Identifier("ID", i)); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("pardecl",12, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statlist ::= 
            {
              List<StatementOp> RESULT =null;
		 RESULT = new LinkedList<StatementOp>();; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("statlist",13, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statlist ::= stat statlist 
            {
              List<StatementOp> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		StatementOp st = (StatementOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		List<StatementOp> stl = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 stl.add(st); RESULT = stl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("statlist",13, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // idlist ::= ID 
            {
              List<Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 List<Identifier> idl = new LinkedList<Identifier>(); idl.add (new Identifier("ID", i)); RESULT = idl; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlist",14, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // idlist ::= idlist COMMA ID 
            {
              List<Identifier> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		List<Identifier> il = (List<Identifier>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 il.add (new Identifier("ID", i)); RESULT = il;  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("idlist",14, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stat ::= ifstat SEMI 
            {
              StatementOp RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		IfStatOp ifs = (IfStatOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = ifs; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stat ::= whilestat SEMI 
            {
              StatementOp RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		WhileOp ws = (WhileOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = ws; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stat ::= readstat SEMI 
            {
              StatementOp RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		ReadOp rs = (ReadOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = rs; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stat ::= writestat SEMI 
            {
              StatementOp RESULT =null;
		int wrsleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int wrsright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		WriteOp wrs = (WriteOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = wrs; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stat ::= assignstat SEMI 
            {
              StatementOp RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		AssignOp as = (AssignOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = as; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stat ::= callfun SEMI 
            {
              StatementOp RESULT =null;
		int cfsleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int cfsright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		CallFunOp cfs = (CallFunOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = cfs; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stat ::= switch SEMI 
            {
              StatementOp RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		SwitchOp sw = (SwitchOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = sw; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stat ::= RETURN expr SEMI 
            {
              StatementOp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		ExpressionOp es = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = new ReturnOp("ExNode",es); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("stat",15, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // switch ::= SWITCH ID expr COLON statlist STOP SEMI expr COLON statlist STOP SEMI expr COLON statlist STOP SEMI END SWITCH 
            {
              SwitchOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-17)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-17)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-17)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-16)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-16)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-16)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-14)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-14)).right;
		List<StatementOp> sl = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-14)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-11)).right;
		ExpressionOp e1 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-11)).value;
		int sl1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-9)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-9)).right;
		List<StatementOp> sl1 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).right;
		List<StatementOp> sl2 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).value;
		 RESULT = new SwitchOp("SwitchNode", new Identifier("ID", i), e, sl, e1, sl1, e2, sl2);
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("switch",25, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-18)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ifstat ::= IF expr THEN vardecllist statlist else END IF 
            {
              IfStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).right;
		List<StatementOp> s1 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ElseStatOp el = (ElseStatOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		 RESULT = new IfStatOp("IfNode",e, new BodyOp ("BodyNode", v1, s1), el); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("ifstat",16, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-7)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else ::= 
            {
              ElseStatOp RESULT =null;
		 RESULT = null; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else ::= ELSE vardecllist statlist 
            {
              ElseStatOp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		List<StatementOp> s1 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new ElseStatOp("ElseNode", new BodyOp ("BodyNode", v1, s1)); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // whilestat ::= WHILE expr LOOP vardecllist statlist END LOOP 
            {
              WhileOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-5)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).right;
		List<VarDeclOp> v1 = (List<VarDeclOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		List<StatementOp> s1 = (List<StatementOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		 RESULT = new WhileOp("WhileNode", e, new BodyOp ("BodyNode", v1, s1)); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("whilestat",17, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-6)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // readstat ::= READ idlist expr 
            {
              ReadOp RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		List<Identifier> idl = (List<Identifier>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new ReadOp ("ReadNode",idl,e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("readstat",18, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // readstat ::= READ idlist 
            {
              ReadOp RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		List<Identifier> idl = (List<Identifier>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new ReadOp ("ReadNode",idl);
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("readstat",18, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // writestat ::= WRITE expr 
            {
              WriteOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new WriteOp ("WriteNode", 0, e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("writestat",19, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // writestat ::= WRITELN expr 
            {
              WriteOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new WriteOp ("WriteNode", 1, e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("writestat",19, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // writestat ::= WRITET expr 
            {
              WriteOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new WriteOp ("WriteNode", 2, e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("writestat",19, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // writestat ::= WRITEB expr 
            {
              WriteOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new WriteOp ("WriteNode", 3, e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("writestat",19, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignstat ::= ID ASSIGN expr 
            {
              AssignOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new AssignOp ("AssignNode", new Identifier ("ID", i), e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("assignstat",20, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // callfun ::= ID LPAR exprlist RPAR 
            {
              CallFunOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		List<ExpressionOp> e = (List<ExpressionOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = new CallFunOp("CallNode", new Identifier ("ID", i), e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("callfun",22, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-3)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // callfun ::= ID LPAR RPAR 
            {
              CallFunOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		  RESULT = new CallFunOp("CallNode", new Identifier ("ID", i)); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("callfun",22, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprlist ::= expr 
            {
              List<ExpressionOp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 List<ExpressionOp> el = new LinkedList<ExpressionOp>(); el.add(e); RESULT = el;  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("exprlist",23, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprlist ::= expr COMMA exprlist 
            {
              List<ExpressionOp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		List<ExpressionOp> els = (List<ExpressionOp>)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 els.add(e); RESULT = els; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("exprlist",23, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprlist ::= OUTPAR ID 
            {
              List<ExpressionOp> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 List<ExpressionOp> el = new LinkedList<ExpressionOp>(); OutparOp e = new OutparOp("OutparNode", new Identifier("ID", i)); el.add(e); RESULT = el; 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("exprlist",23, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= TRUE 
            {
              ExpressionOp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new BooleanEx("BoolConst", true); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= FALSE 
            {
              ExpressionOp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new BooleanEx("BoolConst", false); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= NUMBER_INT 
            {
              ExpressionOp RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Integer ni = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value);
		 RESULT = new IntegerEx("NumberInt", ni);  
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= NUMBER_REAL 
            {
              ExpressionOp RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Float nr = Float.parseFloat((String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value);
		 RESULT = new RealEx("NumberReal", nr); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= STRING_CONST 
            {
              ExpressionOp RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new StringEx("StringConst", sc);   
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= ID 
            {
              ExpressionOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new Identifier ("ID", i); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr PLUS expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("plus",Token.PLUS, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr MINUS expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("minus",Token.MINUS, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr TIMES expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("times",Token.TIMES, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr DIV expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("div",Token.DIV, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr DIVINT expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("divint",Token.DIVINT, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr AND expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("and",Token.AND, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr POW expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("pow",Token.POW, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr STR_CONCAT expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("strconcat",Token.STR_CONCAT, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr OR expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("or",Token.OR, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr GT expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("gt",Token.GT, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr GE expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("ge",Token.GE, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr LT expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("lt",Token.LT, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr LE expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("le",Token.LE, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr EQ expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("eq",Token.EQ, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr NE expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e2 = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new MultiOp("ne",Token.NE, e,e2); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= MINUS expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new SingOp("minus", Token.MINUS, e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= NOT expr 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new SingOp("not", Token.NOT, e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= LPAR expr RPAR 
            {
              ExpressionOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).right;
		ExpressionOp e = (ExpressionOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-1)).value;
		 RESULT = new SingOp("exp", 0, e); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.elementAt(CUP$MyFunparser$top-2)), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= NULL 
            {
              ExpressionOp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new NullOp ("null"); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= callfun 
            {
              ExpressionOp RESULT =null;
		int cfsleft = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).left;
		int cfsright = ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()).right;
		CallFunOp cfs = (CallFunOp)((java_cup.runtime.Symbol) CUP$MyFunparser$stack.peek()).value;
		 RESULT = new CallfunEx("callfunex", cfs); 
              CUP$MyFunparser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyFunparser$stack.peek()), RESULT);
            }
          return CUP$MyFunparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyFunparser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyFunparser$do_action(
    int                        CUP$MyFunparser$act_num,
    java_cup.runtime.lr_parser CUP$MyFunparser$parser,
    java.util.Stack            CUP$MyFunparser$stack,
    int                        CUP$MyFunparser$top)
    throws java.lang.Exception
    {
              return CUP$MyFunparser$do_action_part00000000(
                               CUP$MyFunparser$act_num,
                               CUP$MyFunparser$parser,
                               CUP$MyFunparser$stack,
                               CUP$MyFunparser$top);
    }
}

}
