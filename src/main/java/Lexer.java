// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: srcjflexcup/Lexer.flex

import java_cup.runtime.Symbol;
import SymbleTable.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\12\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\4\12\1\36\25\12\1\6\1\37\1\6\1\40\1\41"+
    "\1\6\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\2\12\1\53\1\54\1\55\1\56\1\57"+
    "\1\12\1\60\1\61\1\62\1\63\1\64\1\65\3\12"+
    "\1\6\1\66\2\6\6\0\1\67\32\0\2\6\4\12"+
    "\4\6\1\12\2\6\1\0\7\6\1\12\4\6\1\12"+
    "\5\6\27\12\1\6\37\12\1\6\u01ca\12\4\6\14\12"+
    "\16\6\5\12\7\6\1\12\1\6\1\12\21\6\160\0"+
    "\5\12\1\6\2\12\2\6\4\12\10\6\1\12\1\6"+
    "\3\12\1\6\1\12\1\6\24\12\1\6\123\12\1\6"+
    "\213\12\1\6\5\0\2\6\236\12\11\6\46\12\2\6"+
    "\1\12\7\6\47\12\7\6\1\12\1\6\55\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\1\0\10\6"+
    "\33\12\5\6\3\12\15\6\5\0\6\6\1\12\4\6"+
    "\13\0\5\6\53\12\37\0\4\6\2\12\1\0\143\12"+
    "\1\6\1\12\10\0\1\6\6\0\2\12\2\0\1\6"+
    "\4\0\2\12\12\0\3\12\2\6\1\12\17\6\1\0"+
    "\1\12\1\0\36\12\33\0\2\6\131\12\13\0\1\12"+
    "\16\6\12\0\41\12\11\0\2\12\4\6\1\12\5\6"+
    "\26\12\4\0\1\12\11\0\1\12\3\0\1\12\5\0"+
    "\22\6\31\12\3\0\104\6\1\12\1\6\13\12\67\6"+
    "\33\0\1\6\4\0\66\12\3\0\1\12\22\0\1\12"+
    "\7\0\12\12\2\0\2\6\12\0\1\6\7\12\1\6"+
    "\7\12\1\6\3\0\1\6\10\12\2\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\1\12\3\6\4\12\2\6"+
    "\1\0\1\12\7\0\2\6\2\0\2\6\3\0\1\12"+
    "\10\6\1\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\4\12\7\6\1\12\5\6\3\0\1\6\6\12"+
    "\4\6\2\12\2\6\26\12\1\6\7\12\1\6\2\12"+
    "\1\6\2\12\1\6\2\12\2\6\1\0\1\6\5\0"+
    "\4\6\2\0\2\6\3\0\3\6\1\0\7\6\4\12"+
    "\1\6\1\12\7\6\14\0\3\12\1\0\13\6\3\0"+
    "\1\6\11\12\1\6\3\12\1\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\5\12\2\6\1\0\1\12\10\0"+
    "\1\6\3\0\1\6\3\0\2\6\1\12\17\6\2\12"+
    "\2\0\2\6\12\0\1\6\1\12\17\6\3\0\1\6"+
    "\10\12\2\6\2\12\2\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\5\12\2\6\1\0\1\12\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\2\0\4\6\2\12\1\6"+
    "\3\12\2\0\2\6\12\0\1\6\1\12\20\6\1\0"+
    "\1\12\1\6\6\12\3\6\3\12\1\6\4\12\3\6"+
    "\2\12\1\6\1\12\1\6\2\12\3\6\2\12\3\6"+
    "\3\12\3\6\14\12\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\12\6\6\1\0\16\6\12\0\11\6"+
    "\1\12\7\6\3\0\1\6\10\12\1\6\3\12\1\6"+
    "\27\12\1\6\12\12\1\6\5\12\3\6\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\1\6\2\12"+
    "\6\6\2\12\2\0\2\6\12\0\22\6\2\0\1\6"+
    "\10\12\1\6\3\12\1\6\27\12\1\6\12\12\1\6"+
    "\5\12\2\6\1\0\1\12\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\7\6\1\12\1\6\2\12\2\0"+
    "\2\6\12\0\1\6\2\12\17\6\2\0\1\6\10\12"+
    "\1\6\3\12\1\6\51\12\2\6\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\1\12\10\6\1\0\10\6\2\12"+
    "\2\0\2\6\12\0\12\6\6\12\2\6\2\0\1\6"+
    "\22\12\3\6\30\12\1\6\11\12\1\6\1\12\2\6"+
    "\7\12\3\6\1\0\4\6\6\0\1\6\1\0\1\6"+
    "\10\0\22\6\2\0\15\6\60\12\1\0\2\12\7\0"+
    "\4\6\10\12\10\0\1\6\12\0\47\6\2\12\1\6"+
    "\1\12\2\6\2\12\1\6\1\12\2\6\1\12\6\6"+
    "\4\12\1\6\7\12\1\6\3\12\1\6\1\12\1\6"+
    "\1\12\2\6\2\12\1\6\4\12\1\0\2\12\6\0"+
    "\1\6\2\0\1\12\2\6\5\12\1\6\1\12\1\6"+
    "\6\0\2\6\12\0\2\6\4\12\40\6\1\12\27\6"+
    "\2\0\6\6\12\0\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\2\0\10\12\1\6\44\12\4\6\24\0"+
    "\1\6\2\0\5\12\13\0\1\6\44\0\11\6\1\0"+
    "\71\6\53\12\24\0\1\12\12\0\6\6\6\12\4\0"+
    "\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0"+
    "\15\12\14\0\1\12\17\0\2\6\46\12\1\6\1\12"+
    "\5\6\1\12\2\6\53\12\1\6\115\12\1\6\4\12"+
    "\2\6\7\12\1\6\1\12\1\6\4\12\2\6\51\12"+
    "\1\6\4\12\2\6\41\12\1\6\4\12\2\6\7\12"+
    "\1\6\1\12\1\6\4\12\2\6\17\12\1\6\71\12"+
    "\1\6\4\12\2\6\103\12\2\6\3\0\40\6\20\12"+
    "\20\6\125\12\14\6\u016c\12\2\6\21\12\1\6\32\12"+
    "\5\6\113\12\3\6\3\12\17\6\15\12\1\6\4\12"+
    "\3\0\13\6\22\12\3\0\13\6\22\12\2\0\14\6"+
    "\15\12\1\6\3\12\1\6\2\0\14\6\64\12\40\0"+
    "\3\6\1\12\3\6\2\12\1\0\2\6\12\0\41\6"+
    "\3\0\2\6\12\0\6\6\130\12\10\6\51\12\1\0"+
    "\1\12\5\6\106\12\12\6\35\12\3\6\14\0\4\6"+
    "\14\0\12\6\12\0\36\12\2\6\5\12\13\6\54\12"+
    "\4\6\21\0\7\12\2\0\6\6\12\0\46\6\27\12"+
    "\5\0\4\6\65\12\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\12\130\6\5\0\57\12\21\0"+
    "\7\12\4\6\12\0\21\6\11\0\14\6\3\0\36\12"+
    "\15\0\2\12\12\0\54\12\16\0\14\6\44\12\24\0"+
    "\10\6\12\0\3\6\3\12\12\0\44\12\122\6\3\0"+
    "\1\6\25\0\4\12\1\0\4\12\3\0\2\12\11\6"+
    "\300\12\47\0\25\6\4\0\26\12\2\6\6\12\2\6"+
    "\46\12\2\6\6\12\2\6\10\12\1\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\37\12\2\6\65\12\1\6"+
    "\7\12\1\6\1\12\3\6\3\12\1\6\7\12\3\6"+
    "\4\12\2\6\6\12\4\6\15\12\5\6\3\12\1\6"+
    "\7\12\16\6\5\0\30\6\2\3\5\0\20\6\2\12"+
    "\23\6\1\12\13\6\5\0\5\6\6\0\1\6\1\12"+
    "\15\6\1\12\20\6\15\12\3\6\33\12\25\6\15\0"+
    "\4\6\1\0\3\6\14\0\21\6\1\12\4\6\1\12"+
    "\2\6\12\12\1\6\1\12\3\6\5\12\6\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\4\12\1\6\13\12"+
    "\2\6\4\12\5\6\5\12\4\6\1\12\21\6\51\12"+
    "\u0177\6\57\12\1\6\57\12\1\6\205\12\6\6\4\12"+
    "\3\0\2\12\14\6\46\12\1\6\1\12\5\6\1\12"+
    "\2\6\70\12\7\6\1\12\17\6\1\0\27\12\11\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\40\0\57\6\1\12\325\6\3\12\31\6\11\12\6\0"+
    "\1\6\5\12\2\6\5\12\4\6\126\12\2\6\2\0"+
    "\2\6\3\12\1\6\132\12\1\6\4\12\5\6\51\12"+
    "\3\6\136\12\21\6\33\12\65\6\306\12\112\6\315\12"+
    "\63\6\215\12\103\6\56\12\2\6\15\12\3\6\20\12"+
    "\12\0\2\12\24\6\57\12\1\0\4\6\12\0\1\6"+
    "\31\12\7\6\1\0\120\12\2\0\45\6\11\12\2\6"+
    "\147\12\2\6\4\12\1\6\4\12\14\6\13\12\115\6"+
    "\12\12\1\0\3\12\1\0\4\12\1\0\27\12\5\0"+
    "\20\6\1\12\7\6\64\12\14\6\2\0\62\12\21\0"+
    "\13\6\12\0\6\6\22\0\6\12\3\6\1\12\4\6"+
    "\12\0\34\12\10\0\2\6\27\12\15\0\14\6\35\12"+
    "\3\6\4\0\57\12\16\0\16\6\1\12\12\0\46\6"+
    "\51\12\16\0\11\6\3\12\1\0\10\12\2\0\2\6"+
    "\12\0\6\6\27\12\3\6\1\12\1\0\4\6\60\12"+
    "\1\0\1\12\3\0\2\12\2\0\5\12\2\0\1\12"+
    "\1\0\1\12\30\6\3\12\2\6\13\12\5\0\2\6"+
    "\3\12\2\0\12\6\6\12\2\6\6\12\2\6\6\12"+
    "\11\6\7\12\1\6\7\12\221\6\43\12\10\0\1\6"+
    "\2\0\2\6\12\0\6\6\244\12\14\6\27\12\4\6"+
    "\61\12\4\6\u0100\3\156\12\2\6\152\12\46\6\7\12"+
    "\14\6\5\12\5\6\1\12\1\0\12\12\1\6\15\12"+
    "\1\6\5\12\1\6\1\12\1\6\2\12\1\6\2\12"+
    "\1\6\154\12\41\6\153\12\22\6\100\12\2\6\66\12"+
    "\50\6\15\12\3\6\20\0\20\6\7\0\14\6\2\12"+
    "\30\6\3\12\31\6\1\12\6\6\5\12\1\6\207\12"+
    "\2\6\1\0\4\6\1\12\13\6\12\0\7\6\32\12"+
    "\4\6\1\12\1\6\32\12\13\6\131\12\3\6\6\12"+
    "\2\6\6\12\2\6\6\12\2\6\3\12\3\6\2\12"+
    "\3\6\2\12\22\6\3\0\4\6\14\12\1\6\32\12"+
    "\1\6\23\12\1\6\2\12\1\6\17\12\2\6\16\12"+
    "\42\6\173\12\105\6\65\12\210\6\1\0\202\6\35\12"+
    "\3\6\61\12\57\6\37\12\21\6\33\12\65\6\36\12"+
    "\2\6\44\12\4\6\10\12\1\6\5\12\52\6\236\12"+
    "\2\6\12\0\126\6\6\12\2\6\1\12\1\6\54\12"+
    "\1\6\2\12\3\6\1\12\2\6\27\12\252\6\26\12"+
    "\12\6\32\12\106\6\70\12\6\6\2\12\100\6\1\12"+
    "\3\0\1\6\2\0\5\6\4\0\4\12\1\6\3\12"+
    "\1\6\33\12\4\6\3\0\4\6\1\0\40\6\35\12"+
    "\203\6\66\12\12\6\26\12\12\6\23\12\215\6\111\12"+
    "\267\6\3\0\65\12\17\0\37\6\12\0\20\6\3\0"+
    "\55\12\13\0\2\6\1\0\22\6\31\12\7\6\12\0"+
    "\6\6\3\0\44\12\16\0\1\6\12\0\100\6\3\0"+
    "\60\12\16\0\4\12\13\6\12\0\246\6\53\12\15\0"+
    "\10\6\12\0\66\6\157\12\221\6\143\12\235\6\57\12"+
    "\321\6\71\12\307\6\105\12\13\6\1\12\56\0\20\6"+
    "\4\0\15\12\140\6\2\12\u0163\6\5\0\3\6\26\0"+
    "\2\6\7\0\36\6\4\0\224\6\3\0\273\6\125\12"+
    "\1\6\107\12\1\6\2\12\2\6\1\12\2\6\2\12"+
    "\2\6\4\12\1\6\14\12\1\6\1\12\1\6\7\12"+
    "\1\6\101\12\1\6\4\12\2\6\10\12\1\6\7\12"+
    "\1\6\34\12\1\6\4\12\1\6\5\12\1\6\1\12"+
    "\3\6\7\12\1\6\u0154\12\2\6\31\12\1\6\31\12"+
    "\1\6\37\12\1\6\31\12\1\6\37\12\1\6\31\12"+
    "\1\6\37\12\1\6\31\12\1\6\37\12\1\6\31\12"+
    "\1\6\10\12\2\6\62\0\4\12\1\6\33\12\1\6"+
    "\2\12\1\6\1\12\2\6\1\12\1\6\12\12\1\6"+
    "\4\12\1\6\1\12\1\6\1\12\6\6\1\12\4\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\3\12\1\6"+
    "\2\12\1\6\1\12\2\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\2\12\1\6"+
    "\1\12\2\6\4\12\1\6\7\12\1\6\4\12\1\6"+
    "\4\12\1\6\1\12\1\6\12\12\1\6\21\12\5\6"+
    "\3\12\1\6\5\12\1\6\21\12\104\6\327\12\51\6"+
    "\65\12\13\6\336\12\343\6\1\0\36\6\140\0\200\6"+
    "\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\17\4\1\27\1\30\1\31\4\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\7\4\1\40\5\4"+
    "\1\41\10\4\1\0\1\42\1\0\1\43\1\0\1\43"+
    "\1\44\3\4\1\45\1\4\1\46\3\4\1\47\1\4"+
    "\1\50\7\4\1\51\1\4\1\42\1\0\1\52\1\4"+
    "\1\53\2\4\1\54\1\55\1\56\1\57\1\4\1\60"+
    "\2\4\1\61\1\62\2\4\1\63\4\4\1\64\2\4"+
    "\1\65\1\66\1\67\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\70\0\70\0\u0188\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\u01c0\0\u01f8\0\70\0\u0230\0\70\0\u0268"+
    "\0\u02a0\0\70\0\70\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8"+
    "\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\u05e8\0\70\0\70\0\u0620\0\u0188\0\u0658\0\u0690"+
    "\0\u06c8\0\70\0\70\0\70\0\70\0\70\0\70\0\u0700"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0150\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u0150\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0150\0\u0c78\0\u0cb0\0\u0ce8\0\u0150"+
    "\0\u0d20\0\u0150\0\u0d58\0\u0d90\0\u0dc8\0\u0150\0\u0e00\0\u0150"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0150"+
    "\0\u0fc0\0\70\0\u0c40\0\u0150\0\u0ff8\0\u0150\0\u1030\0\u1068"+
    "\0\u0150\0\u0150\0\u0150\0\u0150\0\u10a0\0\u0150\0\u10d8\0\u1110"+
    "\0\u0150\0\u0150\0\u1148\0\u1180\0\u0150\0\u11b8\0\u11f0\0\u1228"+
    "\0\u1260\0\u0150\0\u1298\0\u12d0\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\3\1\4\1\2\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\2\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\10\1\2"+
    "\1\33\1\10\1\34\1\35\1\10\1\36\1\37\1\40"+
    "\2\10\1\41\1\42\1\43\1\44\1\45\1\10\1\46"+
    "\1\47\1\50\1\10\1\51\1\52\1\4\1\2\72\0"+
    "\1\4\2\0\1\4\60\0\1\4\33\0\1\53\35\0"+
    "\10\6\1\54\57\6\20\0\1\55\47\0\1\10\11\0"+
    "\1\10\13\0\1\10\7\0\1\10\2\0\25\10\1\0"+
    "\1\10\2\56\1\0\12\56\1\54\21\56\1\57\30\56"+
    "\24\0\1\60\1\0\1\23\7\0\1\61\63\0\1\62"+
    "\67\0\1\63\67\0\1\64\57\0\1\65\1\0\1\66"+
    "\2\0\1\67\40\0\1\10\11\0\1\10\13\0\1\10"+
    "\7\0\1\10\2\0\14\10\1\70\10\10\1\0\2\10"+
    "\11\0\1\10\13\0\1\10\7\0\1\10\2\0\15\10"+
    "\1\71\7\10\1\0\2\10\11\0\1\10\13\0\1\10"+
    "\7\0\1\10\2\0\11\10\1\72\13\10\1\0\2\10"+
    "\11\0\1\10\13\0\1\10\7\0\1\10\2\0\12\10"+
    "\1\73\1\10\1\74\10\10\1\0\2\10\11\0\1\10"+
    "\13\0\1\10\7\0\1\10\2\0\1\10\1\75\20\10"+
    "\1\76\2\10\1\0\2\10\11\0\1\10\13\0\1\10"+
    "\7\0\1\10\2\0\6\10\1\77\5\10\1\100\10\10"+
    "\1\0\2\10\11\0\1\10\13\0\1\10\7\0\1\10"+
    "\2\0\15\10\1\101\7\10\1\0\2\10\11\0\1\10"+
    "\13\0\1\10\7\0\1\10\2\0\1\10\1\102\23\10"+
    "\1\0\2\10\11\0\1\10\13\0\1\10\7\0\1\10"+
    "\2\0\15\10\1\103\4\10\1\104\2\10\1\0\2\10"+
    "\11\0\1\10\13\0\1\10\7\0\1\10\2\0\17\10"+
    "\1\105\2\10\1\106\2\10\1\0\2\10\11\0\1\10"+
    "\13\0\1\10\7\0\1\10\2\0\5\10\1\107\17\10"+
    "\1\0\2\10\11\0\1\10\13\0\1\10\7\0\1\10"+
    "\2\0\21\10\1\110\2\10\1\111\1\0\2\10\11\0"+
    "\1\10\13\0\1\10\7\0\1\10\2\0\10\10\1\112"+
    "\6\10\1\113\5\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\1\10\1\114\23\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\10\10\1\115\14\10\1\0\1\10\11\116\1\117\6\116"+
    "\1\120\47\116\3\56\3\0\61\56\27\0\1\121\62\0"+
    "\1\122\4\0\1\123\41\0\1\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\4\10\1\124\20\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\15\10\1\125\7\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\23\10\1\126\1\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\20\10\1\127\4\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\4\10\1\130\20\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\12\10\1\131\12\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\14\10\1\132\10\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\21\10\1\133\3\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\15\10\1\134\7\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\11\10\1\135\13\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\21\10\1\136\3\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\12\10\1\137\12\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\21\10\1\140\3\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\1\10\1\141\17\10\1\142\3\10\1\0\2\10\11\0"+
    "\1\10\13\0\1\10\7\0\1\10\2\0\15\10\1\143"+
    "\1\10\1\144\5\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\11\10\1\145\13\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\5\10\1\146\17\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\22\10\1\147\2\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\17\10\1\150\5\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\11\10\1\151\13\10\1\0"+
    "\1\10\11\116\1\152\56\116\11\0\1\152\6\0\1\120"+
    "\75\0\1\121\7\0\1\61\54\0\1\153\72\0\1\123"+
    "\41\0\1\10\11\0\1\10\13\0\1\10\7\0\1\10"+
    "\2\0\12\10\1\154\12\10\1\0\2\10\11\0\1\10"+
    "\13\0\1\10\7\0\1\10\2\0\1\155\24\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\5\10\1\156\17\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\20\10\1\157\4\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\5\10\1\160\17\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\16\10\1\161\6\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\14\10\1\162\10\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\12\10\1\163\12\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\12\10\1\164\12\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\22\10\1\165\2\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\16\10\1\166\6\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\11\10\1\167\13\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\21\10\1\170\3\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\14\10\1\171\10\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\5\10\1\172\17\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\12\10\1\173\12\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\11\10\1\174\13\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\5\10\1\175\17\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\7\10\1\176\15\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\17\10\1\177\5\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\14\10\1\200\10\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\3\10\1\201\21\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\5\10\1\202\17\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\14\10\1\203\10\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\5\10\1\204\17\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\14\10\1\205\10\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\7\10\1\206\15\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\10\10\1\207\14\10\1\0"+
    "\2\10\11\0\1\10\13\0\1\10\7\0\1\10\2\0"+
    "\21\10\1\210\3\10\1\0\2\10\11\0\1\10\13\0"+
    "\1\10\7\0\1\10\2\0\17\10\1\211\5\10\1\0"+
    "\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\2\11\1\1\7\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\17\1\2\11\1\1\4\0"+
    "\6\11\26\1\1\0\1\1\1\0\1\1\1\0\27\1"+
    "\1\11\1\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type)
	{
		return new Symbol(type);
	}

	private Symbol symbol(int type, String value)
	{
		Symbol toReturn;
		toReturn = new Symbol(type, yyline, yycolumn, value);
		return toReturn;
	}

      private void error(String message) {
        System.out.println("Line:"+(yyline+1)+" Column:"+(yycolumn+1)+message);
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Token.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+yytext()+"> at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 58: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 59: break;
          case 3:
            { error("stringa non chiusa");
            }
            // fall through
          case 60: break;
          case 4:
            { return symbol(Token.ID, yytext());
            }
            // fall through
          case 61: break;
          case 5:
            { return symbol(Token.READ, yytext());
            }
            // fall through
          case 62: break;
          case 6:
            { return symbol(Token.STR_CONCAT, yytext());
            }
            // fall through
          case 63: break;
          case 7:
            { return symbol(Token.LPAR, yytext());
            }
            // fall through
          case 64: break;
          case 8:
            { return symbol(Token.RPAR, yytext());
            }
            // fall through
          case 65: break;
          case 9:
            { return symbol(Token.TIMES, yytext());
            }
            // fall through
          case 66: break;
          case 10:
            { return symbol(Token.PLUS, yytext());
            }
            // fall through
          case 67: break;
          case 11:
            { return symbol(Token.COMMA, yytext());
            }
            // fall through
          case 68: break;
          case 12:
            { return symbol(Token.MINUS, yytext());
            }
            // fall through
          case 69: break;
          case 13:
            { return symbol(Token.DIV, yytext());
            }
            // fall through
          case 70: break;
          case 14:
            { return symbol(Token.NUMBER_INT, yytext());
            }
            // fall through
          case 71: break;
          case 15:
            { return symbol(Token.COLON, yytext());
            }
            // fall through
          case 72: break;
          case 16:
            { return symbol(Token.SEMI, yytext());
            }
            // fall through
          case 73: break;
          case 17:
            { return symbol(Token.LT, yytext());
            }
            // fall through
          case 74: break;
          case 18:
            { return symbol(Token.EQ, yytext());
            }
            // fall through
          case 75: break;
          case 19:
            { return symbol(Token.GT, yytext());
            }
            // fall through
          case 76: break;
          case 20:
            { return symbol(Token.WRITE, yytext());
            }
            // fall through
          case 77: break;
          case 21:
            { return symbol(Token.OUTPAR, yytext());
            }
            // fall through
          case 78: break;
          case 22:
            { return symbol(Token.POW, yytext());
            }
            // fall through
          case 79: break;
          case 23:
            { return symbol(Token.NE, yytext());
            }
            // fall through
          case 80: break;
          case 24:
            { return symbol(Token.STRING_CONST, yytext());
            }
            // fall through
          case 81: break;
          case 25:
            { error ("commento non chiuso");
            }
            // fall through
          case 82: break;
          case 26:
            { return symbol(Token.ASSIGN, yytext());
            }
            // fall through
          case 83: break;
          case 27:
            { return symbol(Token.LE, yytext());
            }
            // fall through
          case 84: break;
          case 28:
            { return symbol(Token.GE, yytext());
            }
            // fall through
          case 85: break;
          case 29:
            { return symbol(Token.WRITEB, yytext());
            }
            // fall through
          case 86: break;
          case 30:
            { return symbol(Token.WRITELN, yytext());
            }
            // fall through
          case 87: break;
          case 31:
            { return symbol(Token.WRITET, yytext());
            }
            // fall through
          case 88: break;
          case 32:
            { return symbol(Token.IF, yytext());
            }
            // fall through
          case 89: break;
          case 33:
            { return symbol(Token.OR, yytext());
            }
            // fall through
          case 90: break;
          case 34:
            { 
            }
            // fall through
          case 91: break;
          case 35:
            { return symbol(Token.NUMBER_REAL, yytext());
            }
            // fall through
          case 92: break;
          case 36:
            { return symbol(Token.AND, yytext());
            }
            // fall through
          case 93: break;
          case 37:
            { return symbol(Token.END, yytext());
            }
            // fall through
          case 94: break;
          case 38:
            { return symbol(Token.FUN, yytext());
            }
            // fall through
          case 95: break;
          case 39:
            { return symbol(Token.NOT, yytext());
            }
            // fall through
          case 96: break;
          case 40:
            { return symbol(Token.OUT, yytext());
            }
            // fall through
          case 97: break;
          case 41:
            { return symbol(Token.VAR, yytext());
            }
            // fall through
          case 98: break;
          case 42:
            { return symbol(Token.BOOL, yytext());
            }
            // fall through
          case 99: break;
          case 43:
            { return symbol(Token.ELSE, yytext());
            }
            // fall through
          case 100: break;
          case 44:
            { return symbol(Token.LOOP, yytext());
            }
            // fall through
          case 101: break;
          case 45:
            { return symbol(Token.MAIN, yytext());
            }
            // fall through
          case 102: break;
          case 46:
            { return symbol(Token.NULL, yytext());
            }
            // fall through
          case 103: break;
          case 47:
            { return symbol(Token.REAL, yytext());
            }
            // fall through
          case 104: break;
          case 48:
            { return symbol(Token.STOP, yytext());
            }
            // fall through
          case 105: break;
          case 49:
            { return symbol(Token.THEN, yytext());
            }
            // fall through
          case 106: break;
          case 50:
            { return symbol(Token.TRUE, yytext());
            }
            // fall through
          case 107: break;
          case 51:
            { return symbol(Token.FALSE, yytext());
            }
            // fall through
          case 108: break;
          case 52:
            { return symbol(Token.WHILE, yytext());
            }
            // fall through
          case 109: break;
          case 53:
            { return symbol(Token.RETURN, yytext());
            }
            // fall through
          case 110: break;
          case 54:
            { return symbol(Token.STRING, yytext());
            }
            // fall through
          case 111: break;
          case 55:
            { return symbol(Token.SWITCH, yytext());
            }
            // fall through
          case 112: break;
          case 56:
            { return symbol(Token.DIVINT, yytext());
            }
            // fall through
          case 113: break;
          case 57:
            { return symbol(Token.INTEGER, yytext());
            }
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
